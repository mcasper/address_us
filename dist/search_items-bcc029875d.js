searchNodes=[{"doc":"Container for the struct that contains the Address information.","ref":"Address.html","title":"Address","type":"module"},{"doc":"Struct containing Address information.","ref":"Address.html#__struct__/0","title":"Address.__struct__/0","type":"function"},{"doc":"","ref":"Address.html#t:t/0","title":"Address.t/0","type":"type"},{"doc":"Parses US Addresses.","ref":"AddressUS.Parser.html","title":"AddressUS.Parser","type":"module"},{"doc":"Abbreviates the state provided.Exampleiex&gt; AddressUS.Parser.abbreviate_state(&quot;Wyoming&quot;) &quot;WY&quot; iex&gt; AddressUS.Parser.abbreviate_state(&quot;wyoming&quot;) &quot;WY&quot; iex&gt; AddressUS.Parser.abbreviate_state(&quot;Wyomin&quot;) &quot;Wyomin&quot; iex&gt; AddressUS.Parser.abbreviate_state(nil) nil","ref":"AddressUS.Parser.html#abbreviate_state/1","title":"AddressUS.Parser.abbreviate_state/1","type":"function"},{"doc":"Removes non-numeric characters from the phone number and then returns the integer.Examplesiex&gt; AddressUS.Parser.clean_phone_number(&quot;(303) 310-7802&quot;) 3033107802","ref":"AddressUS.Parser.html#clean_phone_number/1","title":"AddressUS.Parser.clean_phone_number/1","type":"function"},{"doc":"Removes country code and associated punctuation from the phone number.Examplesiex&gt; AddressUS.Parser.filter_country_code(&quot;+1 303-310-7802&quot;) &quot;303-310-7802&quot; iex&gt; AddressUS.Parser.filter_country_code(&quot;+1 (303) 310-7802&quot;) &quot;(303) 310-7802&quot; iex&gt; AddressUS.Parser.filter_country_code(&quot;+1-303-310-7802&quot;) &quot;303-310-7802&quot; iex&gt; AddressUS.Parser.filter_country_code(&quot;1-303-310-7802&quot;) &quot;303-310-7802&quot;","ref":"AddressUS.Parser.html#filter_country_code/1","title":"AddressUS.Parser.filter_country_code/1","type":"function"},{"doc":"Converts the country to the 2 digit ISO country code. &quot;US&quot; is default.Exampleiex&gt; AddressUS.Parser.get_country_code(nil) &quot;US&quot; iex&gt; AddressUS.Parser.get_country_code(&quot;Afghanistan&quot;) &quot;AF&quot; iex&gt; AddressUS.Parser.get_country_code(&quot;AF&quot;) &quot;AF&quot;","ref":"AddressUS.Parser.html#get_country_code/1","title":"AddressUS.Parser.get_country_code/1","type":"function"},{"doc":"Parses a raw address into all of its requisite parts according to USPS suggestions for address parsing.Known Bugs1) if street suffix is left off while parsing a full multi-line address, it will fail unless there is a comma or newline separating the street name from the city.Examplesiex&gt; AddressUS.Parser.parse_address(&quot;2345 S B Street, Denver, CO 80219&quot;) %Address{city: &quot;Denver&quot;, plus_4: nil, postal: &quot;80219&quot;, state: &quot;CO&quot;, street: %Street{name: &quot;B&quot;, pmb: nil, post_direction: nil, pre_direction: &quot;S&quot;, primary_number: &quot;2345&quot;, secondary_designator: nil, secondary_value: nil, suffix: &quot;St&quot;}}","ref":"AddressUS.Parser.html#parse_address/1","title":"AddressUS.Parser.parse_address/1","type":"function"},{"doc":"Parses the raw street portion of an address into its requisite parts according to USPS suggestions for address parsing.Examplesiex&gt; AddressUS.Parser.parse_address_line(&quot;2345 S. Beade St&quot;) %Street{name: &quot;Beade&quot;, pmb: nil, post_direction: nil, pre_direction: &quot;S&quot;, primary_number: &quot;2345&quot;, secondary_designator: nil, secondary_value: nil, suffix: &quot;St&quot;}","ref":"AddressUS.Parser.html#parse_address_line/1","title":"AddressUS.Parser.parse_address_line/1","type":"function"},{"doc":"Parses a csv, but instead of parsing at every comma, it only splits at the last one found. This allows it to handle situations where the first value parsed has a comma in it that is not part of what you want to parse.Exampleiex&gt; AddressUS.Parser.parse_csv(&quot;test/test.csv&quot;) %{&quot;Something Horrible, (The worst place other than Wyoming)&quot; =&gt; &quot;SH&quot;, &quot;Wyoming&quot; =&gt; &quot;WY&quot;}","ref":"AddressUS.Parser.html#parse_csv/1","title":"AddressUS.Parser.parse_csv/1","type":"function"},{"doc":"","ref":"AddressUS.Parser.html#title_case/1","title":"AddressUS.Parser.title_case/1","type":"function"},{"doc":"Contains all of the config parameters for the address parser.","ref":"AddressUSConfig.html","title":"AddressUSConfig","type":"module"},{"doc":"","ref":"AddressUSConfig.html#countries/0","title":"AddressUSConfig.countries/0","type":"function"},{"doc":"","ref":"AddressUSConfig.html#directions/0","title":"AddressUSConfig.directions/0","type":"function"},{"doc":"","ref":"AddressUSConfig.html#reversed_directions/0","title":"AddressUSConfig.reversed_directions/0","type":"function"},{"doc":"","ref":"AddressUSConfig.html#secondary_units/0","title":"AddressUSConfig.secondary_units/0","type":"function"},{"doc":"","ref":"AddressUSConfig.html#states/0","title":"AddressUSConfig.states/0","type":"function"},{"doc":"","ref":"AddressUSConfig.html#street_suffixes/0","title":"AddressUSConfig.street_suffixes/0","type":"function"},{"doc":"Container for the struct that contains the Street information for an address.","ref":"Street.html","title":"Street","type":"module"},{"doc":"Struct containing the Street information.","ref":"Street.html#__struct__/0","title":"Street.__struct__/0","type":"function"},{"doc":"","ref":"Street.html#t:t/0","title":"Street.t/0","type":"type"}]